#!/bin/sh
# ai-move-context - Move user context file to completed documentation
# Usage: ai-move-context [--dry-run] [--yes] [context-file]
# Default: dry-run mode, requires --yes for actual execution

set -eu

# Configuration
SCRIPT_DIR="$(cd "$(dirname "$0")" && pwd)"
REPO_ROOT="$(cd "$SCRIPT_DIR/.." && pwd)"
LOG_DIR="$SCRIPT_DIR/logs"
LOG_FILE="$LOG_DIR/ai-move-context-$(date +%Y%m%d).log"
DRY_RUN=true
FORCE_YES=false
CONTEXT_FILE=""

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Create log directory
mkdir -p "$LOG_DIR"

# Logging function
log() {
    echo "$(date '+%Y-%m-%d %H:%M:%S') $*" >> "$LOG_FILE"
}

# Print with color and log
print_status() {
    color=$1
    message=$2
    printf "${color}%s${NC}\n" "$message"
    log "$message"
}

# Usage function
usage() {
    cat << EOF
Usage: $0 [OPTIONS] [CONTEXT_FILE]

Move user context file to completed documentation.

OPTIONS:
    --dry-run       Show what would be done (default)
    --yes           Actually perform operations
    --context <path> Specify context file path (legacy compatibility)
    -h, --help      Show this help

CONTEXT_FILE:
    Optional path to specific context file.
    If not provided, will look for files in ai-contexts/wip/

EXAMPLES:
    $0                                    # Dry-run mode, auto-detect
    $0 --yes mycontext.md                # Move specific file
    $0 --yes                             # Move most recent context

SAFETY:
    - Defaults to dry-run mode
    - Requires --yes flag for actual execution
    - Logs all operations
EOF
}

# Parse arguments
while [ $# -gt 0 ]; do
    case $1 in
        --dry-run)
            DRY_RUN=true
            shift
            ;;
        --yes)
            DRY_RUN=false
            FORCE_YES=true
            shift
            ;;
        --context)
            CONTEXT_FILE="$2"
            shift 2
            ;;
        -h|--help)
            usage
            exit 0
            ;;
        -*)
            print_status "$RED" "Unknown option: $1"
            usage
            exit 1
            ;;
        *)
            CONTEXT_FILE="$1"
            shift
            ;;
    esac
done

# Find context file
WIP_DIR="$REPO_ROOT/ai-contexts/wip"
if [ -n "$CONTEXT_FILE" ]; then
    if [ ! -f "$CONTEXT_FILE" ]; then
        if [ -f "$WIP_DIR/$CONTEXT_FILE" ]; then
            CONTEXT_FILE="$WIP_DIR/$CONTEXT_FILE"
        else
            print_status "$RED" "Error: Context file not found: $CONTEXT_FILE"
            exit 1
        fi
    fi
else
    # Find the most recent context file (excluding README.md and .gitkeep)
    if [ ! -d "$WIP_DIR" ]; then
        print_status "$RED" "Error: WIP directory not found: $WIP_DIR"
        exit 1
    fi
    
    # Find .md files, exclude README.md and system files, sort by modification time
    CONTEXT_FILE=""
    if command -v stat >/dev/null 2>&1; then
        # Use stat for proper sorting by modification time
        CONTEXT_FILE=$(find "$WIP_DIR" -name "*.md" -type f ! -name "README.md" ! -name ".gitkeep" -print0 2>/dev/null | \
                      xargs -0 stat -f "%m %N" 2>/dev/null | \
                      sort -rn | \
                      head -n 1 | \
                      cut -d' ' -f2- || true)
    else
        # Fallback: use ls -t (less reliable but works)
        CONTEXT_FILE=$(find "$WIP_DIR" -name "*.md" -type f ! -name "README.md" ! -name ".gitkeep" -exec ls -t {} + 2>/dev/null | head -n 1 || true)
    fi
    
    # If no context files found, error out with helpful message
    if [ -z "$CONTEXT_FILE" ]; then
        print_status "$RED" "Error: No context files found in $WIP_DIR"
        print_status "$YELLOW" "Expected: User context files (.md) excluding README.md"
        print_status "$YELLOW" "Tip: Place your context files in $WIP_DIR/ or specify with --context <file>"
        exit 1
    fi
fi

# Get current date for completed folder
YEAR_MONTH=$(date +%Y-%m)
COMPLETED_DIR="$REPO_ROOT/ai-contexts/project-plans/completed/$YEAR_MONTH"
CONTEXT_NAME=$(basename "$CONTEXT_FILE")
TARGET_NAME="context-$CONTEXT_NAME"

print_status "$BLUE" "üìÑ AI Move Context - Archive User Context"
print_status "$BLUE" "====================================="
log "Starting context move for: $CONTEXT_FILE"

if [ "$DRY_RUN" = true ]; then
    print_status "$YELLOW" "üîç DRY RUN MODE - No actual changes will be made"
    print_status "$YELLOW" "Add --yes flag to perform actual operations"
    echo
fi

# Show what will be done
print_status "$BLUE" "üìã Context Summary:"
echo "   Source: $CONTEXT_FILE"
echo "   Target: $COMPLETED_DIR/$TARGET_NAME"
echo "   Log: $LOG_FILE"
echo

print_status "$BLUE" "üìÅ Operations to perform:"

if [ "$DRY_RUN" = true ]; then
    echo "   [DRY] Create directory: $COMPLETED_DIR"
    echo "   [DRY] Move file: $CONTEXT_FILE ‚Üí $COMPLETED_DIR/$TARGET_NAME"
else
    # Create completed directory
    print_status "$GREEN" "üìÅ Creating completed directory: $COMPLETED_DIR"
    mkdir -p "$COMPLETED_DIR"
    
    # Move context file with prefix
    print_status "$GREEN" "üìÑ Moving context file: $CONTEXT_NAME ‚Üí $TARGET_NAME"
    mv "$CONTEXT_FILE" "$COMPLETED_DIR/$TARGET_NAME"
    
    print_status "$GREEN" "‚úÖ Context move successful!"
fi

# Show summary
echo
print_status "$BLUE" "üìä Summary:"
echo "   Context file: $CONTEXT_NAME"
echo "   Destination: completed/$YEAR_MONTH/$TARGET_NAME"
echo "   Log file: $LOG_FILE"

if [ "$DRY_RUN" = true ]; then
    echo
    print_status "$YELLOW" "üéØ To actually move this context, run:"
    print_status "$YELLOW" "   $0 --yes"
fi

log "Context move finished: success=$( [ "$DRY_RUN" = false ] && echo "true" || echo "dry-run" )"
