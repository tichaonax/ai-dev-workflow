#!/bin/sh
# ai-task-complete - Complete current task and archive project plan
# Usage: ai-task-complete [--dry-run] [--yes] [plan-file]
# Default: dry-run mode, requires --yes for actual execution

set -eu

# Configuration
SCRIPT_DIR="$(cd "$(dirname "$0")" && pwd)"
REPO_ROOT="$(cd "$SCRIPT_DIR/.." && pwd)"
LOG_DIR="$SCRIPT_DIR/logs"
LOG_FILE="$LOG_DIR/ai-task-complete-$(date +%Y%m%d).log"
DRY_RUN=true
FORCE_YES=false
PLAN_FILE=""

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Create log directory
mkdir -p "$LOG_DIR"

# Logging function
log() {
    echo "$(date '+%Y-%m-%d %H:%M:%S') $*" >> "$LOG_FILE"
}

# Print with color and log
print_status() {
    color=$1
    message=$2
    printf "${color}%s${NC}\n" "$message"
    log "$message"
}

# Usage function
usage() {
    cat << EOF
Usage: $0 [OPTIONS] [PLAN_FILE]

Complete current task and archive project plan.

OPTIONS:
    --dry-run       Show what would be done (default)
    --yes           Actually perform operations
    --plan <path>   Specify plan file path (legacy compatibility)
    -h, --help      Show this help

PLAN_FILE:
    Optional path to specific project plan file.
    If not provided, will look for plans in ai-contexts/project-plans/active/

EXAMPLES:
    $0                                    # Dry-run mode
    $0 --yes                             # Actually execute
    $0 --yes projectplan-hpp-5470.md    # Complete specific plan

SAFETY:
    - Defaults to dry-run mode
    - Requires --yes flag for actual execution
    - Creates backups before moving files
    - Logs all operations
EOF
}

# Parse arguments
while [ $# -gt 0 ]; do
    case $1 in
        --dry-run)
            DRY_RUN=true
            shift
            ;;
        --yes)
            DRY_RUN=false
            FORCE_YES=true
            shift
            ;;
        --plan)
            PLAN_FILE="$2"
            shift 2
            ;;
        -h|--help)
            usage
            exit 0
            ;;
        -*)
            print_status "$RED" "Unknown option: $1"
            usage
            exit 1
            ;;
        *)
            PLAN_FILE="$1"
            shift
            ;;
    esac
done

# Check if we're in a git repository
if ! git rev-parse --git-dir > /dev/null 2>&1; then
    print_status "$RED" "Error: Not in a git repository"
    exit 1
fi

# Find project plan file
ACTIVE_DIR="$REPO_ROOT/ai-contexts/project-plans/active"
if [ -n "$PLAN_FILE" ]; then
    if [ ! -f "$PLAN_FILE" ]; then
        if [ -f "$ACTIVE_DIR/$PLAN_FILE" ]; then
            PLAN_FILE="$ACTIVE_DIR/$PLAN_FILE"
        else
            print_status "$RED" "Error: Plan file not found: $PLAN_FILE"
            exit 1
        fi
    fi
else
    # Find the most recent plan file
    if [ ! -d "$ACTIVE_DIR" ]; then
        print_status "$RED" "Error: Active plans directory not found: $ACTIVE_DIR"
        exit 1
    fi
    
    PLAN_FILE=$(find "$ACTIVE_DIR" -name "projectplan-*.md" -type f | sort | tail -n 1)
    if [ -z "$PLAN_FILE" ]; then
        print_status "$RED" "Error: No project plans found in $ACTIVE_DIR"
        exit 1
    fi
fi

# Get current date for completed folder
YEAR_MONTH=$(date +%Y-%m)
COMPLETED_DIR="$REPO_ROOT/ai-contexts/project-plans/completed/$YEAR_MONTH"
PLAN_NAME=$(basename "$PLAN_FILE")

print_status "$BLUE" "üéØ AI Task Complete - Project Plan Archival"
print_status "$BLUE" "=================================="
log "Starting task completion for: $PLAN_FILE"

if [ "$DRY_RUN" = true ]; then
    print_status "$YELLOW" "üîç DRY RUN MODE - No actual changes will be made"
    print_status "$YELLOW" "Add --yes flag to perform actual operations"
    echo
fi

# Check if all tasks are completed (look for unchecked boxes)
UNCHECKED_COUNT=$(grep -c '^- \[ \]' "$PLAN_FILE" 2>/dev/null || echo "0")
if [ "$UNCHECKED_COUNT" -gt 0 ]; then
    print_status "$YELLOW" "‚ö†Ô∏è  Warning: Found $UNCHECKED_COUNT unchecked tasks in project plan"
    print_status "$YELLOW" "   Consider running 'TASK UPDATE' first to mark completed tasks"
    
    if [ "$FORCE_YES" = false ]; then
        printf "Continue anyway? (y/N): "
        read -r response
        case $response in
            [yY]|[yY][eE][sS])
                print_status "$GREEN" "‚úÖ Continuing with task completion"
                ;;
            *)
                print_status "$BLUE" "üõë Task completion cancelled"
                exit 0
                ;;
        esac
    fi
fi

# Show what will be done
print_status "$BLUE" "üìã Plan Summary:"
echo "   Source: $PLAN_FILE"
echo "   Target: $COMPLETED_DIR/$PLAN_NAME"
echo "   Log: $LOG_FILE"
echo

print_status "$BLUE" "üìÅ Operations to perform:"

if [ "$DRY_RUN" = true ]; then
    echo "   [DRY] Create directory: $COMPLETED_DIR"
    echo "   [DRY] Move file: $PLAN_FILE ‚Üí $COMPLETED_DIR/$PLAN_NAME"
    echo "   [DRY] Git add: ai-contexts/project-plans/completed/"
    echo "   [DRY] Git commit with auto-generated message"
else
    # Create completed directory
    print_status "$GREEN" "üìÅ Creating completed directory: $COMPLETED_DIR"
    mkdir -p "$COMPLETED_DIR"
    
    # Move project plan
    print_status "$GREEN" "üìÑ Moving project plan: $PLAN_NAME"
    mv "$PLAN_FILE" "$COMPLETED_DIR/"
    
    # Generate commit message from plan content
    TITLE=$(head -n 10 "$COMPLETED_DIR/$PLAN_NAME" | grep '^# ' | head -n 1 | sed 's/^# //' || echo "Task completion")
    COMMIT_MSG="Complete: $TITLE

Archived project plan to completed/$YEAR_MONTH/
- File: $PLAN_NAME
- Completed: $(date '+%Y-%m-%d %H:%M:%S')

[ai-task-complete]"
    
    # Git operations
    print_status "$GREEN" "üíæ Staging changes..."
    git add "ai-contexts/project-plans/completed/"
    
    print_status "$GREEN" "üíæ Committing with message:"
    echo "$COMMIT_MSG" | sed 's/^/   /'
    git commit -m "$COMMIT_MSG"
    
    print_status "$GREEN" "‚úÖ Task completion successful!"
fi

# Show summary
echo
print_status "$BLUE" "üìä Summary:"
echo "   Plan file: $PLAN_NAME"
echo "   Destination: completed/$YEAR_MONTH/"
echo "   Unchecked tasks: $UNCHECKED_COUNT"
echo "   Log file: $LOG_FILE"

if [ "$DRY_RUN" = true ]; then
    echo
    print_status "$YELLOW" "üéØ To actually complete this task, run:"
    print_status "$YELLOW" "   $0 --yes"
fi

log "Task completion finished: success=$( [ "$DRY_RUN" = false ] && echo "true" || echo "dry-run" )"
