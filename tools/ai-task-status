#!/bin/sh
# ai-task-status - Show current task progress and status
# Usage: ai-task-status [plan-file]
# Read-only command, shows project plan progress

set -eu

# Configuration
SCRIPT_DIR="$(cd "$(dirname "$0")" && pwd)"
REPO_ROOT="$(cd "$SCRIPT_DIR/.." && pwd)"
PLAN_FILE=""

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Print with color
print_status() {
    color=$1
    message=$2
    printf "${color}%s${NC}\n" "$message"
}

# Usage function
usage() {
    cat << EOF
Usage: $0 [OPTIONS] [PLAN_FILE]

Show current task progress and status.

OPTIONS:
    --plan <path>   Specify plan file path (legacy compatibility)
    -h, --help      Show this help

PLAN_FILE:
    Optional path to specific project plan file.
    If not provided, will look for plans in ai-contexts/project-plans/active/

EXAMPLES:
    $0                                    # Auto-detect current plan
    $0 projectplan-hpp-5470.md           # Show specific plan status
    $0 --plan path/to/plan.md            # Legacy syntax

This is a read-only command that shows progress without making changes.
EOF
}

# Parse arguments
while [ $# -gt 0 ]; do
    case $1 in
        --plan)
            PLAN_FILE="$2"
            shift 2
            ;;
        -h|--help)
            usage
            exit 0
            ;;
        -*)
            print_status "$RED" "Unknown option: $1"
            usage
            exit 1
            ;;
        *)
            PLAN_FILE="$1"
            shift
            ;;
    esac
done

# Find project plan file
ACTIVE_DIR="$REPO_ROOT/ai-contexts/project-plans/active"
if [ -n "$PLAN_FILE" ]; then
    if [ ! -f "$PLAN_FILE" ]; then
        if [ -f "$ACTIVE_DIR/$PLAN_FILE" ]; then
            PLAN_FILE="$ACTIVE_DIR/$PLAN_FILE"
        else
            print_status "$RED" "Error: Plan file not found: $PLAN_FILE"
            exit 1
        fi
    fi
else
    # Find the most recent plan file
    if [ ! -d "$ACTIVE_DIR" ]; then
        print_status "$RED" "Error: Active plans directory not found: $ACTIVE_DIR"
        exit 1
    fi
    
    PLAN_FILE=$(find "$ACTIVE_DIR" -name "projectplan-*.md" -type f | sort | tail -n 1)
    if [ -z "$PLAN_FILE" ]; then
        print_status "$RED" "Error: No project plans found in $ACTIVE_DIR"
        exit 1
    fi
fi

PLAN_NAME=$(basename "$PLAN_FILE")

print_status "$BLUE" "üìä AI Task Status - Project Progress"
print_status "$BLUE" "=================================="
echo "   Plan: $PLAN_NAME"
echo "   Path: $PLAN_FILE"
echo

# Count tasks (handle grep -c properly)
TOTAL_TASKS=$(grep '^- \[ \]\|^- \[x\]' "$PLAN_FILE" 2>/dev/null | wc -l | xargs)
COMPLETED_TASKS=$(grep '^- \[x\]' "$PLAN_FILE" 2>/dev/null | wc -l | xargs)
PENDING_TASKS=$(grep '^- \[ \]' "$PLAN_FILE" 2>/dev/null | wc -l | xargs)

if [ "$TOTAL_TASKS" -eq 0 ]; then
    print_status "$YELLOW" "‚ö†Ô∏è  No checklist items found in plan"
    echo "   This may be a different format or template"
    exit 0
fi

# Calculate percentage
if [ "$TOTAL_TASKS" -gt 0 ]; then
    COMPLETION_PCT=$((100 * COMPLETED_TASKS / TOTAL_TASKS))
else
    COMPLETION_PCT=0
fi

# Status summary
print_status "$BLUE" "üìà Progress Summary:"
echo "   Total tasks: $TOTAL_TASKS"
echo "   Completed: $COMPLETED_TASKS"
echo "   Pending: $PENDING_TASKS"
echo "   Progress: $COMPLETION_PCT%"
echo

# Progress bar
BAR_LENGTH=20
FILLED_LENGTH=$((COMPLETION_PCT * BAR_LENGTH / 100))
EMPTY_LENGTH=$((BAR_LENGTH - FILLED_LENGTH))

printf "   Progress: ["
printf "%*s" "$FILLED_LENGTH" | tr ' ' '='
printf "%*s" "$EMPTY_LENGTH" | tr ' ' '-'
printf "] %d%%\n" "$COMPLETION_PCT"
echo

# Show completed tasks
if [ "$COMPLETED_TASKS" -gt 0 ]; then
    print_status "$GREEN" "‚úÖ Completed Tasks:"
    grep '^- \[x\]' "$PLAN_FILE" | sed 's/^- \[x\]/   ‚úì/' | head -10
    if [ "$COMPLETED_TASKS" -gt 10 ]; then
        echo "   ... and $((COMPLETED_TASKS - 10)) more"
    fi
    echo
fi

# Show pending tasks
if [ "$PENDING_TASKS" -gt 0 ]; then
    print_status "$YELLOW" "‚è≥ Pending Tasks:"
    grep '^- \[ \]' "$PLAN_FILE" | sed 's/^- \[ \]/   ‚óã/' | head -5
    if [ "$PENDING_TASKS" -gt 5 ]; then
        echo "   ... and $((PENDING_TASKS - 5)) more"
    fi
    echo
fi

# Status assessment
if [ "$COMPLETION_PCT" -eq 100 ]; then
    print_status "$GREEN" "üéâ Task is complete! Ready for 'ai-task-complete --yes'"
elif [ "$COMPLETION_PCT" -ge 75 ]; then
    print_status "$GREEN" "üöÄ Task is nearly complete ($COMPLETION_PCT%)"
elif [ "$COMPLETION_PCT" -ge 50 ]; then
    print_status "$YELLOW" "‚è≥ Task is in progress ($COMPLETION_PCT%)"
elif [ "$COMPLETION_PCT" -ge 25 ]; then
    print_status "$YELLOW" "üîÑ Task is getting started ($COMPLETION_PCT%)"
else
    print_status "$BLUE" "üìã Task is just beginning ($COMPLETION_PCT%)"
fi

# Suggest next actions
echo
print_status "$BLUE" "üéØ Suggested Next Steps:"
if [ "$COMPLETION_PCT" -eq 100 ]; then
    echo "   ‚Ä¢ Run: ai-task-complete --yes"
    echo "   ‚Ä¢ Run: ai-move-context --yes (if applicable)"
elif [ "$PENDING_TASKS" -gt 0 ]; then
    echo "   ‚Ä¢ Continue working on pending tasks"
    echo "   ‚Ä¢ Run: TASK UPDATE (to mark completed tasks)"
    echo "   ‚Ä¢ Check for blockers or dependencies"
else
    echo "   ‚Ä¢ Review plan structure"
    echo "   ‚Ä¢ Add specific tasks if needed"
fi
