#!/bin/bash

# AI Workflow Command Utilities
# Provides shell commands for common workflow operations

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Helper function to check if we're in a project with ai-contexts
check_ai_contexts() {
    if [ ! -d "ai-contexts" ]; then
        echo -e "${RED}‚ùå Error: ai-contexts/ folder not found${NC}"
        echo "Run this command from a project root that has ai-contexts/ installed"
        echo "To install: curl -sSL https://raw.githubusercontent.com/tichaonax/ai-dev-workflow/master/install-ai-workflow.sh | bash -s ."
        exit 1
    fi
}

# Get current date components
get_date_components() {
    YEAR=$(date +%Y)
    MONTH=$(date +%m)
    DATE=$(date +%d)
    MONTH_FOLDER="$YEAR-$MONTH"
}

# ai-task-status - Show current task progress
ai_task_status() {
    check_ai_contexts
    
    echo -e "${BLUE}üìä AI Workflow Status${NC}"
    echo "================================"
    
    # Count active project plans
    ACTIVE_COUNT=$(find ai-contexts/project-plans/active -name "*.md" -not -name "README.md" 2>/dev/null | wc -l)
    echo -e "üîÑ Active project plans: ${YELLOW}$ACTIVE_COUNT${NC}"
    
    if [ $ACTIVE_COUNT -gt 0 ]; then
        echo ""
        echo -e "${GREEN}Active Plans:${NC}"
        find ai-contexts/project-plans/active -name "*.md" -not -name "README.md" 2>/dev/null | while read plan; do
            filename=$(basename "$plan")
            echo "  ‚Ä¢ $filename"
            
            # Count completed vs total checkboxes
            if [ -f "$plan" ]; then
                total_tasks=$(grep -c "^- \[" "$plan" 2>/dev/null || echo 0)
                completed_tasks=$(grep -c "^- \[x\]" "$plan" 2>/dev/null || echo 0)
                if [ $total_tasks -gt 0 ]; then
                    percentage=$((completed_tasks * 100 / total_tasks))
                    echo "    Progress: $completed_tasks/$total_tasks tasks (${percentage}%)"
                fi
            fi
        done
    fi
    
    # Count WIP files
    WIP_COUNT=$(find ai-contexts/wip -name "*.md" -not -name "README.md" 2>/dev/null | wc -l)
    echo ""
    echo -e "üìù Context files in WIP: ${YELLOW}$WIP_COUNT${NC}"
    
    # Show completed this month
    get_date_components
    COMPLETED_THIS_MONTH=0
    if [ -d "ai-contexts/project-plans/completed/$MONTH_FOLDER" ]; then
        COMPLETED_THIS_MONTH=$(find "ai-contexts/project-plans/completed/$MONTH_FOLDER" -name "*.md" 2>/dev/null | wc -l)
    fi
    echo -e "‚úÖ Completed this month: ${GREEN}$COMPLETED_THIS_MONTH${NC}"
}

# ai-clean-wip - Clean up WIP folder
ai_clean_wip() {
    check_ai_contexts
    
    echo -e "${BLUE}üßπ Cleaning WIP Folder${NC}"
    echo "================================"
    
    # Find WIP files
    WIP_FILES=$(find ai-contexts/wip -name "*.md" -not -name "README.md" 2>/dev/null)
    
    if [ -z "$WIP_FILES" ]; then
        echo -e "${GREEN}‚úÖ WIP folder is already clean${NC}"
        return
    fi
    
    echo "Found WIP files:"
    echo "$WIP_FILES" | while read wip_file; do
        filename=$(basename "$wip_file")
        echo "  ‚Ä¢ $filename"
    done
    
    echo ""
    echo -e "${YELLOW}‚ö†Ô∏è  This will help you decide what to do with each file${NC}"
    echo "Options: (k)eep, (a)rchive to completed/, (d)elete"
    echo ""
    
    echo "$WIP_FILES" | while read wip_file; do
        filename=$(basename "$wip_file")
        echo -n "What to do with $filename? (k/a/d): "
        read choice
        
        case $choice in
            a|A)
                get_date_components
                mkdir -p "ai-contexts/project-plans/completed/$MONTH_FOLDER"
                new_name="context-$(basename "$wip_file")"
                mv "$wip_file" "ai-contexts/project-plans/completed/$MONTH_FOLDER/$new_name"
                echo -e "  ${GREEN}‚úÖ Archived to completed/$MONTH_FOLDER/$new_name${NC}"
                ;;
            d|D)
                rm "$wip_file"
                echo -e "  ${RED}üóëÔ∏è  Deleted $filename${NC}"
                ;;
            k|K|*)
                echo -e "  ${BLUE}üìù Kept $filename${NC}"
                ;;
        esac
    done
}

# ai-archive-project - Archive current project plan and context
ai_archive_project() {
    check_ai_contexts
    
    if [ -z "$1" ]; then
        echo -e "${RED}‚ùå Usage: ai-archive-project <project-plan-filename>${NC}"
        echo "Example: ai-archive-project projectplan-hpp-5470-tailwind-conversion-2025-10-21.md"
        return 1
    fi
    
    PROJECT_PLAN="ai-contexts/project-plans/active/$1"
    
    if [ ! -f "$PROJECT_PLAN" ]; then
        echo -e "${RED}‚ùå Project plan not found: $PROJECT_PLAN${NC}"
        return 1
    fi
    
    get_date_components
    COMPLETED_DIR="ai-contexts/project-plans/completed/$MONTH_FOLDER"
    mkdir -p "$COMPLETED_DIR"
    
    echo -e "${BLUE}üì¶ Archiving Project${NC}"
    echo "================================"
    
    # Move project plan
    mv "$PROJECT_PLAN" "$COMPLETED_DIR/"
    echo -e "${GREEN}‚úÖ Project plan archived to: $COMPLETED_DIR/$(basename "$PROJECT_PLAN")${NC}"
    
    # Look for related context file
    # Extract ticket from filename (assumes format: projectplan-{ticket}-{description}-{date}.md)
    TICKET=$(echo "$1" | sed 's/projectplan-\([^-]*\)-.*/\1/')
    
    if [ -n "$TICKET" ]; then
        CONTEXT_FILE=$(find ai-contexts/wip -name "*$TICKET*" -name "*.md" 2>/dev/null | head -1)
        
        if [ -n "$CONTEXT_FILE" ] && [ -f "$CONTEXT_FILE" ]; then
            CONTEXT_NAME="context-$(basename "$CONTEXT_FILE")"
            mv "$CONTEXT_FILE" "$COMPLETED_DIR/$CONTEXT_NAME"
            echo -e "${GREEN}‚úÖ Context file archived to: $COMPLETED_DIR/$CONTEXT_NAME${NC}"
        fi
    fi
    
    # Stage for commit
    git add "$COMPLETED_DIR/"
    echo ""
    echo -e "${YELLOW}üìù Files staged for commit. Run:${NC}"
    echo "git commit -m \"Archive $TICKET: [brief description of work]\""
}

# ai-summary-month - Show this month's completed work
ai_summary_month() {
    check_ai_contexts
    get_date_components
    
    COMPLETED_DIR="ai-contexts/project-plans/completed/$MONTH_FOLDER"
    
    echo -e "${BLUE}üìä Monthly Summary - $MONTH_FOLDER${NC}"
    echo "================================"
    
    if [ ! -d "$COMPLETED_DIR" ]; then
        echo -e "${YELLOW}üìù No completed work found for $MONTH_FOLDER${NC}"
        return
    fi
    
    COMPLETED_FILES=$(find "$COMPLETED_DIR" -name "projectplan-*.md" 2>/dev/null)
    
    if [ -z "$COMPLETED_FILES" ]; then
        echo -e "${YELLOW}üìù No project plans completed this month${NC}"
        return
    fi
    
    COUNT=$(echo "$COMPLETED_FILES" | wc -l)
    echo -e "${GREEN}‚úÖ Completed project plans: $COUNT${NC}"
    echo ""
    
    echo "$COMPLETED_FILES" | while read plan; do
        filename=$(basename "$plan")
        # Extract ticket and description from filename
        if [[ $filename =~ projectplan-([^-]+)-(.+)-[0-9]{4}-[0-9]{2}-[0-9]{2}\.md ]]; then
            ticket="${BASH_REMATCH[1]}"
            description="${BASH_REMATCH[2]}"
            description=$(echo "$description" | tr '-' ' ')
            echo -e "  ‚Ä¢ ${YELLOW}$ticket${NC}: $description"
        else
            echo "  ‚Ä¢ $filename"
        fi
    done
}

# ai-find-work - Search completed work by keyword
ai_find_work() {
    check_ai_contexts
    
    if [ -z "$1" ]; then
        echo -e "${RED}‚ùå Usage: ai-find-work <keyword>${NC}"
        echo "Example: ai-find-work tailwind"
        return 1
    fi
    
    KEYWORD="$1"
    
    echo -e "${BLUE}üîç Searching for: '$KEYWORD'${NC}"
    echo "================================"
    
    # Search in completed project plans
    MATCHES=$(find ai-contexts/project-plans/completed -name "*.md" -exec grep -l "$KEYWORD" {} \; 2>/dev/null)
    
    if [ -z "$MATCHES" ]; then
        echo -e "${YELLOW}üìù No matches found for '$KEYWORD'${NC}"
        return
    fi
    
    echo "$MATCHES" | while read match; do
        filename=$(basename "$match")
        dir=$(dirname "$match" | sed 's|ai-contexts/project-plans/completed/||')
        echo -e "${GREEN}üìÑ $filename${NC} (from $dir)"
        
        # Show context around the match
        grep -n -i -C 1 "$KEYWORD" "$match" 2>/dev/null | head -3 | while read line; do
            echo "    $line"
        done
        echo ""
    done
}

# Main command dispatcher
case "$1" in
    "status")
        ai_task_status
        ;;
    "clean-wip")
        ai_clean_wip
        ;;
    "archive")
        ai_archive_project "$2"
        ;;
    "summary")
        ai_summary_month
        ;;
    "find")
        ai_find_work "$2"
        ;;
    *)
        echo -e "${BLUE}ü§ñ AI Workflow Commands${NC}"
        echo "================================"
        echo ""
        echo "Available commands:"
        echo "  ai-workflow status           - Show current task progress"
        echo "  ai-workflow clean-wip        - Clean up WIP folder"
        echo "  ai-workflow archive <plan>   - Archive project plan and context"
        echo "  ai-workflow summary          - Show this month's completed work"
        echo "  ai-workflow find <keyword>   - Search completed work"
        echo ""
        echo "Examples:"
        echo "  ai-workflow status"
        echo "  ai-workflow archive projectplan-hpp-5470-tailwind-conversion-2025-10-21.md"
        echo "  ai-workflow find tailwind"
        echo ""
        echo "For AI commands, use VS Code snippets or direct prompts:"
        echo "  Type 'task-complete' in VS Code and press Tab"
        echo "  Or tell AI: 'TASK COMPLETE'"
        ;;
esac